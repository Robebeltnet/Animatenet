// server.js
require('dotenv').config();
const express = require('express');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { createClient } = require('@supabase/supabase-js');

const app = express();
app.use(express.json());

// Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// Bell Rank logic
function getCreatorPayoutPercentage(ticketSales) {
  if (ticketSales < 1000) return 50;
  if (ticketSales < 10000) return 60;
  if (ticketSales < 25000) return 70;
  if (ticketSales < 50000) return 80;
  return 90;
}

// Route: create Stripe checkout session
app.post('/create-checkout-session', async (req, res) => {
  const { film_id, creator_id } = req.body;
  const session = await stripe.checkout.sessions.create({
    payment_method_types: ['card'],
    line_items: [{
      price_data: {
        currency: 'usd',
        product_data: { name: 'Movie Ticket' },
        unit_amount: 500,
      },
      quantity: 1,
    }],
    mode: 'payment',
    success_url: `${process.env.YOUR_DOMAIN}/success.html`,
    cancel_url: `${process.env.YOUR_DOMAIN}/cancel.html`,
    metadata: { film_id, creator_id }
  });
  res.json({ sessionId: session.id });
});

// Webhook handler
app.post('/webhook', express.raw({ type: 'application/json' }), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;
  try {
    event = stripe.webhooks.constructEvent(
      req.body, sig, process.env.STRIPE_WEBHOOK_SECRET
    );
  } catch (err) {
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'checkout.session.completed') {
    const s = event.data.object;
    // record sale
    await supabase.from('film_sales').insert({
      user_email: s.customer_email,
      film_id: s.metadata.film_id,
      amount: s.amount_total
    });
    // count total sales
    const { count } = await supabase
      .from('film_sales')
      .select('*', { count: 'exact' })
      .eq('film_id', s.metadata.film_id);
    const pct = getCreatorPayoutPercentage(count);
    const revenue = s.amount_total * (pct / 100);
    // record payout
    await supabase.from('creator_payouts').insert({
      creator_id: s.metadata.creator_id,
      film_id: s.metadata.film_id,
      tickets_sold: count,
      payout_percent: pct,
      revenue_share: revenue
    });
    console.log(`Creator ${s.metadata.creator_id} earns $${revenue/100}`);
  }

  res.status(200).send('Received');
});

// Access check for frontend
app.get('/access', async (req, res) => {
  const { user_email } = req.query;
  const { count } = await supabase
    .from('film_sales')
    .select('*', { count: 'exact' })
    .eq('user_email', user_email);
  res.json({ access_granted: count > 0 });
});

const port = process.env.PORT || 4242;
app.listen(port, () => console.log(`Server running on port ${port}`));
